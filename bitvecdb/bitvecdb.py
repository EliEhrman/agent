# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bitvecdb')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bitvecdb')
    _bitvecdb = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bitvecdb', [dirname(__file__)])
        except ImportError:
            import _bitvecdb
            return _bitvecdb
        try:
            _mod = imp.load_module('_bitvecdb', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bitvecdb = swig_import_helper()
    del swig_import_helper
else:
    import _bitvecdb
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _bitvecdb.SVec_x_set
    __swig_getmethods__["x"] = _bitvecdb.SVec_x_get
    if _newclass:
        x = _swig_property(_bitvecdb.SVec_x_get, _bitvecdb.SVec_x_set)
    __swig_setmethods__["y"] = _bitvecdb.SVec_y_set
    __swig_getmethods__["y"] = _bitvecdb.SVec_y_get
    if _newclass:
        y = _swig_property(_bitvecdb.SVec_y_get, _bitvecdb.SVec_y_set)
    __swig_setmethods__["z"] = _bitvecdb.SVec_z_set
    __swig_getmethods__["z"] = _bitvecdb.SVec_z_get
    if _newclass:
        z = _swig_property(_bitvecdb.SVec_z_get, _bitvecdb.SVec_z_set)

    def __init__(self):
        this = _bitvecdb.new_SVec()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bitvecdb.delete_SVec
    __del__ = lambda self: None
SVec_swigregister = _bitvecdb.SVec_swigregister
SVec_swigregister(SVec)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _bitvecdb.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bitvecdb.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _bitvecdb.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _bitvecdb.intArray___setitem__(self, index, value)

    def cast(self):
        return _bitvecdb.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_bitvecdb.intArray_frompointer)
    else:
        frompointer = _bitvecdb.intArray_frompointer
intArray_swigregister = _bitvecdb.intArray_swigregister
intArray_swigregister(intArray)
cvar = _bitvecdb.cvar

def intArray_frompointer(t):
    return _bitvecdb.intArray_frompointer(t)
intArray_frompointer = _bitvecdb.intArray_frompointer

class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _bitvecdb.new_charArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bitvecdb.delete_charArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _bitvecdb.charArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _bitvecdb.charArray___setitem__(self, index, value)

    def cast(self):
        return _bitvecdb.charArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_bitvecdb.charArray_frompointer)
    else:
        frompointer = _bitvecdb.charArray_frompointer
charArray_swigregister = _bitvecdb.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(t):
    return _bitvecdb.charArray_frompointer(t)
charArray_frompointer = _bitvecdb.charArray_frompointer

class strArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _bitvecdb.new_strArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bitvecdb.delete_strArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _bitvecdb.strArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _bitvecdb.strArray___setitem__(self, index, value)

    def cast(self):
        return _bitvecdb.strArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_bitvecdb.strArray_frompointer)
    else:
        frompointer = _bitvecdb.strArray_frompointer
strArray_swigregister = _bitvecdb.strArray_swigregister
strArray_swigregister(strArray)

def strArray_frompointer(t):
    return _bitvecdb.strArray_frompointer(t)
strArray_frompointer = _bitvecdb.strArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _bitvecdb.new_floatArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bitvecdb.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _bitvecdb.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _bitvecdb.floatArray___setitem__(self, index, value)

    def cast(self):
        return _bitvecdb.floatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_bitvecdb.floatArray_frompointer)
    else:
        frompointer = _bitvecdb.floatArray_frompointer
floatArray_swigregister = _bitvecdb.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _bitvecdb.floatArray_frompointer(t)
floatArray_frompointer = _bitvecdb.floatArray_frompointer


def init_capp():
    return _bitvecdb.init_capp()
init_capp = _bitvecdb.init_capp

def free_capp(hcapp):
    return _bitvecdb.free_capp(hcapp)
free_capp = _bitvecdb.free_capp

def set_el_bitvec_size(happ, size):
    return _bitvecdb.set_el_bitvec_size(happ, size)
set_el_bitvec_size = _bitvecdb.set_el_bitvec_size

def add_rec(happ, num_els, data):
    return _bitvecdb.add_rec(happ, num_els, data)
add_rec = _bitvecdb.add_rec

def change_rec(happ, num_els, data, irec):
    return _bitvecdb.change_rec(happ, num_els, data, irec)
change_rec = _bitvecdb.change_rec

def del_rec(happ, num_els, irec):
    return _bitvecdb.del_rec(happ, num_els, irec)
del_rec = _bitvecdb.del_rec

def add_agent(happ):
    return _bitvecdb.add_agent(happ)
add_agent = _bitvecdb.add_agent

def get_closest_recs(happ, k, idxs_ret, hds_ret, obits, num_els, qdata, iskip, delta):
    return _bitvecdb.get_closest_recs(happ, k, idxs_ret, hds_ret, obits, num_els, qdata, iskip, delta)
get_closest_recs = _bitvecdb.get_closest_recs

def init_num_left_buf(hcapp, plen):
    return _bitvecdb.init_num_left_buf(hcapp, plen)
init_num_left_buf = _bitvecdb.init_num_left_buf

def get_cluster_seed(hcapp, cent_ret, hd_avg_ret, hd_thresh_ret, plen, hd_thresh):
    return _bitvecdb.get_cluster_seed(hcapp, cent_ret, hd_avg_ret, hd_thresh_ret, plen, hd_thresh)
get_cluster_seed = _bitvecdb.get_cluster_seed
# This file is compatible with both classic and new-style classes.


