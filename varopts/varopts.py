# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_varopts', [dirname(__file__)])
        except ImportError:
            import _varopts
            return _varopts
        if fp is not None:
            try:
                _mod = imp.load_module('_varopts', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _varopts = swig_import_helper()
    del swig_import_helper
else:
    import _varopts
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _varopts.SVec_x_set
    __swig_getmethods__["x"] = _varopts.SVec_x_get
    if _newclass:
        x = _swig_property(_varopts.SVec_x_get, _varopts.SVec_x_set)
    __swig_setmethods__["y"] = _varopts.SVec_y_set
    __swig_getmethods__["y"] = _varopts.SVec_y_get
    if _newclass:
        y = _swig_property(_varopts.SVec_y_get, _varopts.SVec_y_set)
    __swig_setmethods__["z"] = _varopts.SVec_z_set
    __swig_getmethods__["z"] = _varopts.SVec_z_get
    if _newclass:
        z = _swig_property(_varopts.SVec_z_get, _varopts.SVec_z_set)

    def __init__(self):
        this = _varopts.new_SVec()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _varopts.delete_SVec
    __del__ = lambda self: None
SVec_swigregister = _varopts.SVec_swigregister
SVec_swigregister(SVec)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _varopts.new_intArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _varopts.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _varopts.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _varopts.intArray___setitem__(self, index, value)

    def cast(self):
        return _varopts.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _varopts.intArray_frompointer
    if _newclass:
        frompointer = staticmethod(_varopts.intArray_frompointer)
intArray_swigregister = _varopts.intArray_swigregister
intArray_swigregister(intArray)
cvar = _varopts.cvar

def intArray_frompointer(t):
    return _varopts.intArray_frompointer(t)
intArray_frompointer = _varopts.intArray_frompointer

class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _varopts.new_charArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _varopts.delete_charArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _varopts.charArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _varopts.charArray___setitem__(self, index, value)

    def cast(self):
        return _varopts.charArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _varopts.charArray_frompointer
    if _newclass:
        frompointer = staticmethod(_varopts.charArray_frompointer)
charArray_swigregister = _varopts.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(t):
    return _varopts.charArray_frompointer(t)
charArray_frompointer = _varopts.charArray_frompointer

class strArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _varopts.new_strArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _varopts.delete_strArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _varopts.strArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _varopts.strArray___setitem__(self, index, value)

    def cast(self):
        return _varopts.strArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _varopts.strArray_frompointer
    if _newclass:
        frompointer = staticmethod(_varopts.strArray_frompointer)
strArray_swigregister = _varopts.strArray_swigregister
strArray_swigregister(strArray)

def strArray_frompointer(t):
    return _varopts.strArray_frompointer(t)
strArray_frompointer = _varopts.strArray_frompointer


def str_list_create(len):
    return _varopts.str_list_create(len)
str_list_create = _varopts.str_list_create

def str_list_set(hl, ipos, val):
    return _varopts.str_list_set(hl, ipos, val)
str_list_set = _varopts.str_list_set

def str_list_delete(hl):
    return _varopts.str_list_delete(hl)
str_list_delete = _varopts.str_list_delete

def set_num_vars(hvos, n):
    return _varopts.set_num_vars(hvos, n)
set_num_vars = _varopts.set_num_vars

def set_l_phrases_len(hvos, l_phrases_len, l_phrases_ilen, len):
    return _varopts.set_l_phrases_len(hvos, l_phrases_len, l_phrases_ilen, len)
set_l_phrases_len = _varopts.set_l_phrases_len

def init_vo(hgg, hmpdb, dbname):
    return _varopts.init_vo(hgg, hmpdb, dbname)
init_vo = _varopts.init_vo

def cnt_vars(hvos, loc, b_bound, b_must_bind, val, cd, iext_var):
    return _varopts.cnt_vars(hvos, loc, b_bound, b_must_bind, val, cd, iext_var)
cnt_vars = _varopts.cnt_vars

def do_vo(hvos):
    return _varopts.do_vo(hvos)
do_vo = _varopts.do_vo

def free_vo(hvos):
    return _varopts.free_vo(hvos)
free_vo = _varopts.free_vo

def init_capp():
    return _varopts.init_capp()
init_capp = _varopts.init_capp

def set_el_bitvec_size(happ, size):
    return _varopts.set_el_bitvec_size(happ, size)
set_el_bitvec_size = _varopts.set_el_bitvec_size

def ll_phrases_add_ilen(happ):
    return _varopts.ll_phrases_add_ilen(happ)
ll_phrases_add_ilen = _varopts.ll_phrases_add_ilen

def ll_phrases_add_val(happ, ilen, hsl):
    return _varopts.ll_phrases_add_val(happ, ilen, hsl)
ll_phrases_add_val = _varopts.ll_phrases_add_val

def ll_phrases_print(happ):
    return _varopts.ll_phrases_print(happ)
ll_phrases_print = _varopts.ll_phrases_print

def free_capp(hcapp):
    return _varopts.free_capp(hcapp)
free_capp = _varopts.free_capp

def init_cgg(hcapp):
    return _varopts.init_cgg(hcapp)
init_cgg = _varopts.init_cgg

def free_gg(hgg):
    return _varopts.free_gg(hgg)
free_gg = _varopts.free_gg

def set_num_els_reps(hgg, num_reps):
    return _varopts.set_num_els_reps(hgg, num_reps)
set_num_els_reps = _varopts.set_num_els_reps

def set_els_rep(hgg, bitvec, hd, iel):
    return _varopts.set_els_rep(hgg, bitvec, hd, iel)
set_els_rep = _varopts.set_els_rep

def set_l_wlist_vars_len(hgg, size):
    return _varopts.set_l_wlist_vars_len(hgg, size)
set_l_wlist_vars_len = _varopts.set_l_wlist_vars_len

def set_l_wlist_var(hgg, varquad, ivar):
    return _varopts.set_l_wlist_var(hgg, varquad, ivar)
set_l_wlist_var = _varopts.set_l_wlist_var

def add_el_bin(happ, word, bitvec):
    return _varopts.add_el_bin(happ, word, bitvec)
add_el_bin = _varopts.add_el_bin

def set_el_bin(happ, iel, word, bitvec):
    return _varopts.set_el_bin(happ, iel, word, bitvec)
set_el_bin = _varopts.set_el_bin

def change_el_bin(happ, iel, bin):
    return _varopts.change_el_bin(happ, iel, bin)
change_el_bin = _varopts.change_el_bin

def init_el_bin_db(happ, size, dict_space):
    return _varopts.init_el_bin_db(happ, size, dict_space)
init_el_bin_db = _varopts.init_el_bin_db

def check_el_bin(happ, word):
    return _varopts.check_el_bin(happ, word)
check_el_bin = _varopts.check_el_bin

def mpdb_init(happ, num_idbs):
    return _varopts.mpdb_init(happ, num_idbs)
mpdb_init = _varopts.mpdb_init

def mpdb_add_db(hmpdb, dbname, idb):
    return _varopts.mpdb_add_db(hmpdb, dbname, idb)
mpdb_add_db = _varopts.mpdb_add_db

def mpdb_get_idb(hmpdb, dbname):
    return _varopts.mpdb_get_idb(hmpdb, dbname)
mpdb_get_idb = _varopts.mpdb_get_idb

def mpdb_add_srphrase(hmpdb, ilen, iphrase):
    return _varopts.mpdb_add_srphrase(hmpdb, ilen, iphrase)
mpdb_add_srphrase = _varopts.mpdb_add_srphrase

def mpdb_set_idb_mrk(hmpdb, idb, isrphrase, val):
    return _varopts.mpdb_set_idb_mrk(hmpdb, idb, isrphrase, val)
mpdb_set_idb_mrk = _varopts.mpdb_set_idb_mrk

def mpdb_del_srphrase(hmpdb, isrphrase):
    return _varopts.mpdb_del_srphrase(hmpdb, isrphrase)
mpdb_del_srphrase = _varopts.mpdb_del_srphrase

def mpdb_clear(hmpdb):
    return _varopts.mpdb_clear(hmpdb)
mpdb_clear = _varopts.mpdb_clear

def app_mpdb_bin_init(happ, num_recs, rec_len):
    return _varopts.app_mpdb_bin_init(happ, num_recs, rec_len)
app_mpdb_bin_init = _varopts.app_mpdb_bin_init

def app_mpdb_bin_free(happ):
    return _varopts.app_mpdb_bin_free(happ)
app_mpdb_bin_free = _varopts.app_mpdb_bin_free

def app_mpdb_bin_rec_set(happ, irec, rec):
    return _varopts.app_mpdb_bin_rec_set(happ, irec, rec)
app_mpdb_bin_rec_set = _varopts.app_mpdb_bin_rec_set

def app_mpdb_bin_rec_add(happ, rec):
    return _varopts.app_mpdb_bin_rec_add(happ, rec)
app_mpdb_bin_rec_add = _varopts.app_mpdb_bin_rec_add

def app_mpdb_bin_rec_del(happ, irec):
    return _varopts.app_mpdb_bin_rec_del(happ, irec)
app_mpdb_bin_rec_del = _varopts.app_mpdb_bin_rec_del

def app_mpdb_bin_print(happ):
    return _varopts.app_mpdb_bin_print(happ)
app_mpdb_bin_print = _varopts.app_mpdb_bin_print
# This file is compatible with both classic and new-style classes.


